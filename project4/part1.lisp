(setq fsa '((0 0 x) (0 1 y) (1 2 x) (2 2 x) (2 3 y) (3 3 x) (3 4 z) (4 4 x) (4 2 y) (4 1 a)))
(setq acceptStates '(1 3))
(setq alphabet '(x y z a))
(setq initialState '(0))
(defun testFSA (inputStringAsList)
  (setq state (car initialState))
  (dolist (c inputStringAsList)
    (dolist (transition fsa)
      (setq tState (car transition))
      (setq token (caddr transition))
      (setq nState (cadr transition))
      (unless ;; if c is not in the alphabet, print "Not Accepted" and exit exicution
        (member c alphabet)
        (setq state -1) (return NIL) 
      )
      (cond 
        ((eq state tState)
        (cond 
          ((eq c token)
          (setq state nState)))
        ))
    ) 
    (cond ((null inputStringAsList)(return state)))
  )
  (if (member state acceptStates)
      (format nil "Accepted!")
    ;else
      (format nil "Not Accepted!")
  )
)

(defun demo()
  (setq fp (open "theString.txt" :direction :input))
  (setq input (read fp "done"))
  (princ "processing ")
  (princ input)
  (testFSA input)
)